TP DE DISEÑO DE INTERFACES e INTEGRACIÓN CON BACKEND

Sistema de fidelización de clientes

Se requiere la implementación de un sistema WEB BACKEND de fidelización de
clientes que pueda hacer seguimiento de los puntos otorgados por
operaciones de pago. 

Los módulos a desarrollar debe tener su forma de probarse con el POSTMAN, 
y son los siguientes:

1. Administración de datos del cliente (POST,GET,PUT, DELETE)
	Este módulo contempla la administración de datos del cliente, los
	cuales serán los que acumulen puntos de fidelidad con sus operaciones.
	Los datos de clientes a almacenar serán los siguientes: nombre, apellido,
	número de documento, tipo de documento, nacionalidad, email,
	teléfono, fecha de nacimiento. Estructura: id autogenerado, nombre,
	apellido, número de documento, tipo de documento, nacionalidad,
	email, teléfono, fecha de nacimiento.
	
2. Administración de conceptos de uso de puntos (POST,GET,PUT, DELETE)
	Este módulo contempla la administración de los diferentes conceptos
	que especifican a qué fueron destinados los puntos utilizados, con su
	respectiva cantidad de puntos requerida. 
	Por ejemplo: vale de premio, vale de descuento, vale de consumición, etc. 
	Estructura: id autogenerado, descripción de concepto, puntos requeridos.

3. Administración de reglas de asignación de puntos (POST,GET,PUT, DELETE)
	Este módulo permite definir las reglas que rigen la cantidad de
	puntos a asignar a un cliente en base al rango de valor de consumo:
	- Ejemplo:
		* 0 a 199.999 Gs.: 1 punto cada 50.000
		* 200.000 Gs. a 499.999 Gs. 1 punto cada 30.000
		* 500.000 Gs. para arriba: 1 punto cada 20.000

Observación: los rangos serán opcionales, es decir, se puede tener una sola
regla que asigne 1 punto cada X Gs. sin importar en qué rango cae el
monto de la operación. 

Estructura: id autogenerado, limite inferior, límite superior, monto de equivalencia de 1 punto

4. Parametrización de vencimientos de puntos (POST,GET,PUT, DELETE)
	Este módulo permite definir el tiempo de validez de los puntajes asignados
	a los clientes. Una vez alcanzado el tiempo determinado, los puntos son
	descontados de la bolsa por vencimiento.

Estructura: id autogenerado, fecha de inicio de validez, fecha fin de validez, días de duración del puntaje.

5. Bolsa de puntos
Estructura: id autogenerado, identificador del cliente, fecha de asignación de puntaje, 
fecha de caducidad de puntaje, puntaje asignado, puntaje utilizado, saldo de puntos, 
monto de la operación

6. Uso de puntos
	Debe utilizarse en un esquema FIFO (primero se utilizan las bolsas más antiguas). 
	Tiene un detalle debido a que para satisfacer una petición de puntos se puede utilizar 
	más de una bolsa. 

Estructura:
	- Cabecera: id autogenerado, identificador del cliente, puntaje utilizado, fecha, concepto de uso de punto
	- Detalle: id autogenerado, identificador de la cabecera, puntaje utilizado, identificador de la bolsa de puntos utilizada

Los siguientes puntos deberan ser codificados en python
-------------------------------------------------------

7. Consultas (GET)
	Este módulo contempla la consulta para el desarrollo de reportes.
	Las consultas a proveer son:
	- uso de puntos por: concepto de uso, fecha de uso, cliente
	- bolsa de puntos por: cliente, rango de puntos
	- clientes con puntos a vencer en x días
	- consulta de clientes por: nombre (aproximación), apellido (aproximación), cumpleaños

8. Servicios
	- carga de puntos (POST):se recibe el identificador de cliente y el monto
	de la operación, y se asigna los puntos (genera datos con la estructura
	del punto 5)
	
	- utilizar puntos (POST):se recibe el identificador del cliente y el identificador del 
	concepto de uso y se descuenta dicho puntaje al cliente registrando el uso de puntos 
	(genera datos con la estructura del punto 6 y actualiza la del punto 5) 
	o además debe enviar un correo electrónico al cliente como comprobante 
	
	- consultar cuantos puntos equivale a un monto X (GET):
	es un servicio informativo que devuelve la cantidad de puntos equivalente al monto 
	proporcionado como parámetro utilizando la configuración del punto 3
	
9) Proceso planificado cada x horas
	Proceso que pueda planificarse que corra cada X horas y actualice
	el estado de las bolsas con puntos vencidos.



openapi: 3.0.0
info:
  title: API de Fidelización de Clientes
  description: API para la administración de datos del cliente en un sistema de fidelización de clientes.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
  
  
Obtener Todos los Clientes (GET)
curl -X GET http://127.0.0.1:9092/api/clientes

Obtener Todos los Conceptos (GET)
curl -X GET http://127.0.0.1:9092/api/conceptos

Obtener Todas las Reglas (GET)
curl -X GET http://127.0.0.1:9092/api/reglas

Obtener Todos los Vencimientos (GET)
curl -X GET http://127.0.0.1:9092/api/vencimientos

Obtener Todas las Bolsas (GET)
curl -X GET http://127.0.0.1:9092/api/bolsas

Obtener Todos los Usos de Puntos (GET)
curl -X GET http://127.0.0.1:9092/api/uso_puntos

Obtener Consultas de Uso de Puntos (GET)
curl -X GET http://127.0.0.1:9092/api/consultas/uso_puntos

Obtener Consultas de Bolsas (GET)
curl -X GET http://127.0.0.1:9092/api/consultas/bolsas

Obtener Consultas de Clientes (GET)
curl -X GET http://127.0.0.1:9092/api/consultas/clientes


curl -X GET http://127.0.0.1:9092/api/clientes -H accept: application/json



# Prueba del punto 7.1: Uso de puntos por concepto de uso, fecha de uso, cliente
==========================================================================
SELECT 
    u.id AS uso_puntos_id,
    u.cliente_id,
    c.nombre AS cliente_nombre,
    c.apellido AS cliente_apellido,
    u.fecha,
    u.puntaje_utilizado,
    cu.descripcion AS concepto_uso
FROM 
    usopuntoscabecera u
JOIN 
    cliente c ON u.cliente_id = c.id
JOIN 
    conceptouso cu ON u.concepto_uso_id = cu.id
WHERE 
    --(cu.descripcion = 'Vale de descuento' OR 'Vale de descuento' IS NULL)
    --AND (u.fecha = '2024-06-17' OR '2024-06-17' IS NULL)
    --AND (c.id = 1 OR 1 IS NULL);
	
==========================================================================
# Formato por defecto (tabla de texto)
curl -X GET "http://127.0.0.1:9092/api/consultas/uso_puntos"

# Especificando Formato JSON
curl -X GET "http://127.0.0.1:9092/api/consultas/uso_puntos?Formato=JSON"

# Filtrando por concepto_uso (Formato por defecto: TXT)
curl -X GET "http://127.0.0.1:9092/api/consultas/uso_puntos?concepto_uso=Vale%20de%20premio"

# Filtrando por fecha_uso y cliente_id (Formato JSON)
curl -X GET "http://127.0.0.1:9092/api/consultas/uso_puntos?fecha_uso=2024-06-15&cliente_id=1&Formato=JSON"

# Filtrando por cliente_id (Formato por defecto: TXT)
curl -X GET "http://127.0.0.1:9092/api/consultas/uso_puntos?cliente_id=1"


# Prueba del punto 7.2: Bolsa de puntos por cliente, rango de puntos 
==========================================================================
SELECT 
    b.id AS bolsa_id,
    b.cliente_id,
    c.nombre AS cliente_nombre,
    c.apellido AS cliente_apellido,
    b.fecha_asignacion,
    b.fecha_caducidad,
    b.puntaje_asignado,
    b.puntaje_utilizado,
    b.saldo_puntos,
    b.monto_operacion
FROM 
    bolsapuntos b
JOIN 
    cliente c ON b.cliente_id = c.id
WHERE 
    (:cliente_id IS NULL OR b.cliente_id = :cliente_id)
    AND (:puntos_min IS NULL OR b.saldo_puntos >= :puntos_min)
    AND (:puntos_max IS NULL OR b.saldo_puntos <= :puntos_max);

==========================================================================
# Formato por defecto (tabla de texto)
curl -X GET "http://127.0.0.1:9092/api/consultas/bolsas"

# Especificando Formato JSON
curl -X GET "http://127.0.0.1:9092/api/consultas/bolsas?Formato=JSON"

# Filtrando por cliente_id (Formato por defecto: TXT)
curl -X GET "http://127.0.0.1:9092/api/consultas/bolsas?cliente_id=1"

# Filtrando por rango de puntos (Formato JSON)
curl -X GET "http://127.0.0.1:9092/api/consultas/bolsas?puntos_min=50&puntos_max=100&Formato=JSON"

